#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
    struct Node *prev;
};

struct Node *head = NULL;

// Traversal
// void display(struct Node *head) {
//     if (head == NULL) {
//         printf("List is empty!\n");
//         return;
//     }
//     struct Node *ptr = head;
//     printf("List elements:");
//     do {
//         printf("%d ", ptr->data);
//         ptr = ptr->next;
//     } while (ptr != head);
//     printf("\n");
// }

// Traversal
void display(struct Node *head) {
    if (head == NULL) {
        printf("List is empty!\n");
        return;
    }

    struct Node *ptr = head;

    // Forward direction
    printf("Forward: ");
    do {
        printf("%d ", ptr->data);
        ptr = ptr->next;
    } while (ptr != head);
    printf("\n");

    // Backward direction
    struct Node *last = head->prev;
    ptr = last;
    printf("Backward: ");
    do {
        printf("%d ", ptr->data);
        ptr = ptr->prev;
    } while (ptr != last);
    printf("\n");
}

// Insert at beginning
struct Node* insertAtFirst(struct Node *head, int data) {
    struct Node *ptr = (struct Node*)malloc(sizeof(struct Node));
    ptr->data = data;

    if (head == NULL) {
        ptr->next = ptr->prev = ptr;
        head = ptr;
        return head;
    }

    struct Node *last = head->prev;
    ptr->next = head;
    ptr->prev = last;
    last->next = ptr;
    head->prev = ptr;
    head = ptr;

    return head;
}

// Insert at end
struct Node* insertAtEnd(struct Node *head, int data) {
    struct Node *ptr = (struct Node*)malloc(sizeof(struct Node));
    ptr->data = data;

    if (head == NULL) {
        ptr->next = ptr->prev = ptr;
        head = ptr;
        return head;
    }

    struct Node *last = head->prev;
    last->next = ptr;
    ptr->prev = last;
    ptr->next = head;
    head->prev = ptr;

    return head;
}

// Insert at position
struct Node* insertAtPos(struct Node *head, int data, int pos) {
    if (pos == 1 || head == NULL) {
        return insertAtFirst(head, data);
    }

    struct Node *ptr = (struct Node*)malloc(sizeof(struct Node));
    ptr->data = data;

    struct Node *p = head;
    for (int i = 1; i < pos - 1 && p->next != head; i++) {
        p = p->next;
    }

    ptr->next = p->next;
    ptr->prev = p;
    p->next->prev = ptr;
    p->next = ptr;

    return head;
}

// Delete from beginning
struct Node* deleteFirst(struct Node *head) {
    if (head == NULL) {
        printf("List is empty!\n");
        return NULL;
    }

    if (head->next == head) { // Only one node
        free(head);
        return NULL;
    }

    struct Node *last = head->prev;
    struct Node *temp = head;
    head = head->next;
    head->prev = last;
    last->next = head;
    free(temp);

    return head;
}

// Delete from end
struct Node* deleteEnd(struct Node *head) {
    if (head == NULL) {
        printf("List is empty!\n");
        return NULL;
    }

    if (head->next == head) {
        free(head);
        return NULL;
    }

    struct Node *last = head->prev;
    struct Node *secondLast = last->prev;

    secondLast->next = head;
    head->prev = secondLast;
    free(last);

    return head;
}

// Delete at position
struct Node* deleteAtPos(struct Node *head, int pos) {
    if (head == NULL) {
        printf("List is empty!\n");
        return NULL;
    }

    if (pos == 1) {
        return deleteFirst(head);
    }

    struct Node *p = head;
    for (int i = 1; i < pos && p->next != head; i++) {
        p = p->next;
    }

    if (p == head) {
        printf("Invalid position!\n");
        return head;
    }

    p->prev->next = p->next;
    p->next->prev = p->prev;
    free(p);

    return head;
}

// Search
void search(struct Node *head, int key) {
    if (head == NULL) {
        printf("List is empty!\n");
        return;
    }

    struct Node *ptr = head;
    int pos = 1;
    do {
        if (ptr->data == key) {
            printf("Element %d found at position %d\n", key, pos);
            return;
        }
        ptr = ptr->next;
        pos++;
    } while (ptr != head);

    printf("Element %d not found!\n", key);
}

// Reverse
struct Node* reverse(struct Node *head) {
    if (head == NULL || head->next == head)
        return head;

    struct Node *curr = head, *temp = NULL;

    do {
        temp = curr->prev;
        curr->prev = curr->next;
        curr->next = temp;
        curr = curr->prev;
    } while (curr != head);

    head = temp->prev; // new head
    return head;
}

// Main menu
int main() {
    int choice, data, pos;
    while (1) {
        printf("\n--- Circular Doubly Linked List Menu ---\n");
        printf("1. Insert at Beginning\n");
        printf("2. Insert at End\n");
        printf("3. Insert at Position\n");
        printf("4. Delete from Beginning\n");
        printf("5. Delete from End\n");
        printf("6. Delete from Position\n");
        printf("7. Display\n");
        printf("8. Search\n");
        printf("9. Reverse\n");
        printf("10. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data: ");
                scanf("%d", &data);
                head = insertAtFirst(head, data);
                break;
            case 2:
                printf("Enter data: ");
                scanf("%d", &data);
                head = insertAtEnd(head, data);
                break;
            case 3:
                printf("Enter data: ");
                scanf("%d", &data);
                printf("Enter position: ");
                scanf("%d", &pos);
                head = insertAtPos(head, data, pos);
                break;
            case 4:
                head = deleteFirst(head);
                break;
            case 5:
                head = deleteEnd(head);
                break;
            case 6:
                printf("Enter position: ");
                scanf("%d", &pos);
                head = deleteAtPos(head, pos);
                break;
            case 7:
                display(head);
                break;
            case 8:
                printf("Enter element to search: ");
                scanf("%d", &data);
                search(head, data);
                break;
            case 9:
                head = reverse(head);
                printf("List reversed!\n");
                break;
            case 10:
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }
    return 0;
}

