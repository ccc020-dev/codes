#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

void linkedListTraversal(struct Node *ptr) {
    if (ptr == NULL) {
        printf("Stack is empty\n");
        return;
    }
    printf("Stack elements (top to bottom):\n");
    while (ptr != NULL) {
        printf("Element: %d\n", ptr->data);
        ptr = ptr->next;
    }
}

int isEmpty(struct Node *top) {
    return (top == NULL);
}

int isFull(struct Node *top) {
    struct Node *p = (struct Node *)malloc(sizeof(struct Node));
    if (p == NULL) {
        return 1; // memory exhausted
    } else {
        free(p);
        return 0;
    }
}

struct Node *push(struct Node *top, int x) {
    if (isFull(top)) {
        printf("Stack Overflow! Cannot push %d\n", x);
        return top;
    } else {
        struct Node *n = (struct Node *)malloc(sizeof(struct Node));
        n->data = x;
        n->next = top;
        top = n;
        printf("%d pushed to stack\n", x);
        return top;
    }
}

int pop(struct Node **top) {
    if (isEmpty(*top)) {
        printf("Stack Underflow! Nothing to pop\n");
        return -1;
    } else {
        struct Node *n = *top;
        *top = (*top)->next;
        int x = n->data;
        free(n);
        printf("%d popped from stack\n", x);
        return x;
    }
}

int peek(struct Node *top) {
    if (isEmpty(top)) {
        printf("Stack is empty! Nothing to peek\n");
        return -1;
    } else {
        printf("Top element is %d\n", top->data);
        return top->data;
    }
}

int main() {
    struct Node *top = NULL;
    int choice, val;

    while (1) {
        printf("\n--- Stack Menu (Linked List) ---\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek\n");
        printf("4. Display Stack\n");
        printf("5. Check isEmpty\n");
        printf("6. Check isFull\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to push: ");
                scanf("%d", &val);
                top = push(top, val);
                break;
            case 2:
                pop(&top);
                break;
            case 3:
                peek(top);
                break;
            case 4:
                linkedListTraversal(top);
                break;
            case 5:
                if (isEmpty(top))
                    printf("Stack is empty\n");
                else
                    printf("Stack is not empty\n");
                break;
            case 6:
                if (isFull(top))
                    printf("Stack is full (memory exhausted)\n");
                else
                    printf("Stack is not full\n");
                break;
            case 7:
                printf("Exiting program...\n");
                exit(0);
            default:
                printf("Invalid choice, please try again\n");
        }
    }

    return 0;
}
